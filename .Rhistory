v2
myedit("plot1.R")
plot1(pathofile)
plot1
3p <- xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...)  ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2)  ## Add a horizontal line at the median
})
print(p)
invisible()
source(pathtofile("plot1.R"),local=TRUE)
myedit("plot2.R")
source(pathtofile("plot2.R") and local=TRUE)
source(pathtofile("plot2.R"), local=TRUE)
str(diamonds)
table(diamond$color)
table(diamonds$color)
table(diamonds$color, diamonds$cut)
myedit("myLabels.R")
sourcepathtofile("myLabels.R"), local=TRUE
sourcepathtofile("myLabels.R"), local=TRUE)
source(pathtofile("myLabels.R"), local=TRUE)
xyplot(price~carat | color*cut, data = diamonds, strip = FALSE, pch = 20, xlab = "myxlab", ylab = "myylab", main = "mymain")
xyplot(price~carat|color*cut,data=diamonds,strip=FALSE,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
xyplot(price~carat|color*cut,data=diamonds,pch=20,xlab=myxlab,ylab=myylab,main=mymain)
colors()
sample(colors, 10)
sample(colors(), 10)
xyplot(pal, colorRamp(c("red", "blue")))
colorRamp(c("red","blue"))
pal <- colorRamp(c("red","blue"))
pal(0)
pal(1)
pal(seq(0,1, len =6))
p1 <- colorRampPalette(c("red", "blue"))
p1(2)
p1(6)
0xcc
p2 <- colorRampPalette(c("red", "yellow"))
p2(2)
p2(10)
p1(20)
showMe(p1(20))
showMe(p2(20))
showMe(p2(2))
p1
?fun
?rgb
p3 <- colorRampPalette(c("blue", "green"), alpha = .5)
p3
p3(5)
plot(x, y, pch = 19, col = rgb(0, .5, .5))
plot(x, y, pch = 19, col = rgb(0, .5, .5, .3))
cols <- brewer.pal(3, "BuGn")
showMe(cols)
pal <- colorRampPalette(cols)
showMe(pal(20))
image(volcano, col = pal(20))
image(volcano, col = p1(20))
str(mpg)
qplot(displ, hwy, data = mpg)
qplot(displ, hwy, data = mpg, color = drv)
qplot(displ, hwy, data = mpg, color = drv, geom = c("point", "smooth"))
qplot(y = hwy, data = mpg, color = drv)
myhigh
qplot(drv, hwy, data = mpg, geom = "boxplot")
qplot(drv, hwy, data = mpg, geom = "boxplot", color = manufacturer)
qplot(hwy, data = mpg, fill = drv)
qplot(displ, hwy, data = mpg, facets = . ~ drv)
qplot(hwy, data = mpg, facets = drv ~ ., binwidth = 2)
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . )
qplot(displ, hwy, data = mpg, geom = c("point", "smooth"), facets = . ~ drv)
ggplot(mpg, aes(displ, hwy))
g <- ggplot(mpg, aes(displ, hwy))
summary(g)
g + geom_point()
g + geom_point() + geom_smooth()
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth = "lm"
g + geom_point() + geom_smooth = lm
g + geom_point() + geom_smooth(aes(lm))
g + geom_point() + geom_smooth(aes("lm"))
g + geom_point() + geom_smooth = aes("lm")
g + geom_point() + geom_smooth(aes(lm))
g + geom_point() + geom_smooth("lm")
g + geom_point() + geom_smooth(aes = "lm")
g+geom_point()+geom_smooth(method="lm")
g+geom_point()+geom_smooth(method="lm") + facet_grid = . ~ drv
g+geom_point()+geom_smooth(method="lm") + facet_grid(. ~ drv)
g+geom_point()+geom_smooth(method="lm") + facet_grid(. ~ drv) + ggtitle("Swirl Rules!")
g + geom_point(col = "pink", size = 4, alpha = 1/2)
g + geom_point(color = "pink", size = 4, alpha = 1/2)
g + geom_point(size = 4, alpha = 1/2, aes(col(drv)))
g + geom_point(size = 4, alpha = 1/2, aes(color = drv)
)
g + geom_point(aes(color = drv)) + labs(title = "Swirl Rules!") + labs(x = "Displacement", y = "Hwy Mileage")
g + geom_point(aes(color = drv), size = 2, alpha = 1/2) + geom_smooth(size = 4, linetype = 3, method = "lm", se = FALSE)
g + geom_point(aes(color = drv)) + theme_bw(base_family = "Times")
plot(myx, myy, type = "l", ylim = c(-3,3))
g <- ggplot(testda, aes(x = myx, y = myy))
g <- ggplot(testda, aes(myx, myy))
g <- ggplot(testda, aes(x = x, y = y))
g <- ggplot(testdat, aes(x = myx, y = myy))
g + geom_line(0,g)
g <- ggplot(testdat, aes(x = myx, y = myy), geom_line(0,g))
g+geom_line()
g+geom_line()+ylim(-3,3)
g+geom_line()+cartesian_coord(ylim =c(-3,3))
g+geom_line()+coord_cartesian(ylim =c(-3,3))
g <- ggplot(testdat, aes(x = displ, y = hwy, color = factor(year)))
g <- ggplot(mpg, aes(x = displ, y = hwy, color = factor(year)))
g + geom_point()
g + geom_point() + facet_grid(drv~cyl, margins = TRUE)
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black")
g + geom_point() + facet_grid(drv~cyl, margins = TRUE) + geom_smooth(method = "lm", se = FALSE, size = 2, color = "black") + labs(x = "Displacement", y = "Highway Mileage", title = "Swirl Rules!")
str(diamonds)
qplot(price, data = diamonds)
range(diamonds$price)
qplot(price, data = diamonds, binwidth = 18497/30)
brk
counts
qplot(price, data = diamonds, binwidth = 18497/30, fill = cut
)
qplot(price, data = diamonds, geom = "density")
qplot(price, data = diamonds, geom = "density", color = "cut")
qplot(price, data = diamonds, geom = "density", color = cut)
qplot(carat, price, data = diamonds)
qplot(carat, price, data = diamonds, shape = cut)
qplot(carat, price, data = diamonds, color = cut)
qplot(carat, price, data = diamonds, color = cut, geom_smooth(method = "lm"))
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facets = (.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facets(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facet = (.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facet(.~cut)
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm") + facet = .~cut
qplot(carat,price,data=diamonds, color=cut) + geom_smooth(method="lm")
qplot(carat,price,data=diamonds, color=cut, facets=.~cut) + geom_smooth(method="lm")
g <- ggplot(diamonds, aes(depth, price))
g
summary(g)
g + geom_point(alpha = 1/3)
cutpoints <- quantile(diamonds$carat, seq(0, 1, length = 4), na.rm = TRUE)
cutpoints
diamonds$car2 <- cut(diamonds$carat, cutpoints)
g <- ggplot(diamonds, aes(depth, price))
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2)
diamonds[myd,]
g + geom_point(alpha = 1/3) + facet_grid(cut ~ car2) + geom_smooth(method = "lm", size = 3, color = "pink")
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facets_grid(. ~ cut)
ggplot(diamonds, aes(carat, price)) + geom_boxplot() + facet_grid(. ~ cut)
exit
end
bye()
library(swirl)
swirl()
dist(dataframe)
dist(dataFrame)
hc <- hclust(distxy)
hc
plot(hc)
as.dendogram(hc)
as.dendrogram(hc)
plot(as.dendrogram(hc))
abline(h = 1.5, col = "blue")
abline(h = 0.4, col = "red")
5
abline(h = 0.05)
12
abline(h = 0.05)
dist(dFsm)
hc
heatmap(dataMatrix, col = cm.colors(25))
heatmap(mt)
plot(mt)
heatmap(mt)
mt
plot(denmt)
distmt
cmat
points(cx, cy, col = c("red", "orange", "purple"), pch = 3, cex = 2, lwd = 2)
mdist(x, y, cx, cy)
which.min(distTmp, 2, which.min)
apply(distTmp, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols[newClust])
points(x, y, pch = 19, cex = 2, col = cols1[newClust])
tapply(x, newClust, mean)
tapply(y, newClust, mean)
point(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
points(newCx, newCy, col = cols1, pch = 8, cex = 2, lwd = 2)
mdist(x, y, newCx, newCy)
apply(distTmp2, 2, which.min)
points(x, y, pch = 19, cex = 2, col = cols1[newClust2])
tapply(x, newClust2, mean)
tapply(y, newClust2, mean)
points(finalCx, finalCy, col = cols1, pch = 9, cex = 2, lwd = 2)
kmeans(dataFrame, centers = 3)
kmObj$iter
plot(x, y, col = kmObj$cluster, pch = 19, cex = 2)
points(kmObj$centers, col = c("black", "red", "green"), pch = 3, cex = 3, lwd = 3)
plot(x, y, col = kmeans(dataFrame, 6)$cluser, pch = 19, cex = 2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
plot(x,y,col=kmeans(dataFrame,6)$cluster,pch=19,cex=2)
head(dataMatrix)
heatmap(dataMatrix)
myedit(addPatt.R)
myedit("addPatt.R")
source("addPatt.R", local = TRUE)
heatmap(dataMatrix)
mat
svd(mat)
matu %*% diag %*% t(matv)
svd(scale(mat))
prcomp(scale(mat))
svd1$v[,1]
svd1$d
head(constantMatrix, n=10)
head(constantMatrix)
svd2$d
svd2
svd2$v[,1:2]
svd2$d
dim(faceData)
%*% (svd1$u[1], svd1$d[1])
svd1$u * svd1$d
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1]) OR a1 <- svd1$u[,1] %*% t(svd1$v[,1]) *
| svd1$d[1]
a1 <- (svd1$u[,1] * svd1$d[1]) %*% t(svd1$v[,1])
image(a1)
myImage(a1)
a2 <- svd1$u %*% svd1$v
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
myImage(a2)
a2 <- svd1$u[,1:2] %*% diag(svd1$d[1:2]) %*% t(svd1$v[,1:2])
yImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:5] %*% diag(svd1$d[1:5]) %*% t(svd1$v[,1:5]))
myImage(svd1$u[,1:10] %*% diag(svd1$d[1:10]) %*% t(svd1$v[,1:10]))
dim(ssd)
names(ssd)[562:563,]
names(ssd)
names(ssd[562:563])
table(ssd$subject)
sum(table(ssd$subject))
table(ssd$activity)
sub1 <- subset(ssd, subject = 1)
sub1 <- subset(ssd, subject == 1)
sub1
dim(sub1)
names(sub1[1:12])
myedit("showXY.R")
| "showXY.R" to see the code generating the plots. Make sure your cursor is back in the console
| window before you hit any more buttons.
showMe(1:6)
mdist(sub1, x[,1:3])
mdist(sub1$x[,1:3])
mdist <- dist(sub1$x[ , 1:3])
mdist <- dist(x[ , 1:3])
dist(sub1, x[,1:3])
mdist <- dist(x[ , 1:3], method = "Euclidean")
mdist <- dist(x[ , 1:3])
mdist <- dist(sub1)
mdist <- dist(sub1[,1:3])
hclustering <- hclust(mdist)
myplclust(hclustering, la.col = unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
mdist <- dist(sub1[,10:12])
hclustering <- hclust(mdist)
myplclust(hclustering, lab.col = unclass(sub1$activity))
svd1 <- svd(scale(sub1[,-c(562,563)]))
svd1$u
dim(svd1$u)
maxCon <- which.max(svd1$v)
maxCon <- which.max(svd1$v[,2])
mdist <- dist(sub1[,10:12|maxCon])
mdist <- dist(sub1[,c(10:12,maxCon)])
hclustering <- hclust(mdist)
myplclust(hclustering, unclass(sub1$activity))
myplclust(hclustering, lab.col = unclass(sub1$activity))
names(sub1[masCon])
names(sub1[maxCon])
kClust <- kmeans(sub1[,-c(562,563)], centers = 6)
table(kClust$cluster, sub1$activity)
kClust <- kmeans(sub1[,-c(562,563)], centers = 6, nstart = 100)
table(kClust$cluster, sub1$activity)
dim(kClust, x$y)
dim(kClust[x$y])
dim(kClust[x$y])
dim(kClust[x$y])
dim(kClust, x$y)
dim(kClust, x$y)
dim(kClustx$y)
dim(kClust$x)
dim(kClust$centers)
laying <- which(kClust$size==29)
plot(kClust$centers[laying, 1:12], pch = 19, ylab = "Laying Cluster")
names(sub1[,1:3])
walkdown <- which(kClust$size==49)
plot(kClust$centers[walkdown, 1:12], pch = 19, ylab = "Walkdown Cluster")
bye()
library(swirl)
swirl()
dim(pm0)
head(pm0)
cnames
strsplit(cname, "|", fixed = TRUE)
strsplit(cnames, "|", fixed = TRUE)
cnames <- strsplit(cnames, "|", fixed = TRUE)
cnames
names(pm0) <- make.names(cnames[[1]][wcol])
pm0
head(pm0)
x0 <- pm0$Sample.Value
str(x0)
mean(is.na(x0))
names(pm1) <- make.names(cnames[[1]]][wcol])
names(pm1) <- make.names(cnames[[1]][wcol])
dim(pm1)
x1 <- pm1$Sample.Value
mean(is.na(x1))
summary(x0)
summmary(x1)
summary(x1)
boxplot(x0, x1)
boxplot(log10(x0), log10(x1))
negative <- x1<0
sum(negative, na.rm = TRUE)
mean(negative, na.rm = TRUE)
dates1 <- pm1$Date
dates <- pm1$Date
str(dates)
dates <- as.Date(as.character(dates), "%Y%m$d")
dates <- as.Date(as.character(dates), "%Y%m%d")
head(x1)
head(dates)
hist(dates[negative], "month")
str(site0)
intersect(site0, site1)
both <- intersect(site0, site1)
both
head(pm0)
cnt0 <- subset(pm0, State.Code == 36 & county.site %in% both)
cnt1 <- subset(pm1, State.Code == 36 & county.site %in% both)
sapply(split(cnt0, cnt0$county.site), nrow)
sapply(split(cnt1, cnt1$county.site), nrow)
pm0sub <- subset(cnt0, County.Code == 63 & Site.ID == 2008)
pm1sub <- subset(cnt1, County.Code == 63 & Site.ID == 2008)
x0sub <- pm0sub$Sample.Value
x1sub <- pm1sub$Sample.Value
dates0 <- as.Date(as.character(pm0sub$Date), "%Y%m%d")
dates1 <- as.Date(as.character(pm1sub$Date), "%Y%m%d")
par(mfrow = c(1, 2))
par(mfrow = c(1, 2), mar = c(4, 4, 2, 1))
plot(dates0, x0sub, pch = 20)
abline(h = meadian(x0sub), lwd = 2, na.rm = TRUE)
abline(h = median(x0sub), lwd = 2, na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mn0)
d0 <- data.frame(names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[, 3]))
segments(rep(1999, 52), mrg[, 2], rep(2012, 52), mrg[,3])
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
bye
setwd("/Users/harridw/Development/Coursera/Course5/Course-5-Storm-Data")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
### Package Usage
packages <- c("plyr", "dplyr", "data.table", "dtplyr", "lubridate", "ggplot2",
"scales", "reshape2", "knitr", "cacher", "stringr")
ipak(packages)
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
### Package Usage
packages <- c("plyr", "dplyr", "data.table", "dtplyr", "lubridate", "ggplot2",
"scales", "reshape2", "knitr", "R.cache", "stringr")
ipak(packages)
StormData <- read.csv("repdata-data-StormData.csv.bz2", header = TRUE, sep = ",",
quote = "\"", dec = ".")
##### A quick overview of the data in this file:
dim(StormData)
str(StormData)
StormData$PROPDMG <- StormData$PROPDMG * ifelse(StormData$PROPDMGEXP == "K", 1000,
ifelse(StormData$PROPDMGEXP == "M", 1000000,
ifelse(StormData$PROPDMGEXP == "B", 1000000000, 1)))
StormData$CROPDMG <- StormData$CROPDMG * ifelse(StormData$CROPDMGEXP == "K", 1000,
ifelse(StormData$CROPDMGEXP == "M", 1000000,
ifelse(StormData$CROPDMGEXP == "B", 1000000000, 1)))
StormData$ECONOMIC <- StormData$PROPDMG + StormData$CROPDMG
View(StormData)
StormData$BGN_DATE <- as.Date(StormData$BGN_DATE, "%m/%d/%Y")
StormData$BGN_YEAR <- format(StormData$BGN_DATE, "%Y")
StormData$hour <- as.numeric(substr(StormData$BGN_TIME, 1, 2))
StormData$minute <- substr(StormData$BGN_TIME, 3, 4)
StormData$ampm <- ifelse(StormData$hour > 12, "PM", "AM")
StormData$hour <- ifelse(StormData$hour > 12, StormData$hour - 12,
ifelse(StormData$hour < 1, 12, StormData$hour))
StormData$hour <- substr(paste("00", StormData$hour, sep = ""),
min(length(StormData$hour)+1,3),min(length(StormData$hour)+2, 4))
StormData$BGN_TIME <- paste(StormData$hour, ":", StormData$minute, " ",
StormData$ampm, sep = "")
install.packages("gtools")
library(gtools)
StormData$LENGTH_QUART <- ifelse(StormData$LENGTH = 0, 0,
quantcut(StormData.LENGTH, seq(0,1, by = 0.25),
na.rm = TRUE))
StormData$LENGTH_QUART <- ifelse(StormData$LENGTH = 0, 0,
quantcut(StormData$LENGTH, seq(0,1, by = 0.25),
na.rm = TRUE))
StormData$LENGTH_QUART <- ifelse(StormData$LENGTH == 0, 0,
quantcut(StormData$LENGTH, seq(0,1, by = 0.25),
na.rm = TRUE))
View(StormData)
range(StormData$LENGTH_QUART)
table(StormData$LENGTH_QUART)
install.packages("quantreg")
library(quantreg)
StormData$LENGTH_QUART <- ifelse(StormData$LENGTH == 0, 0,
quantile(StormData$LENGTH, probs = seq(0,1, 0.25),
na.rm = TRUE, names = TRUE, type = 7))
View(StormData)
table(StormData$LENGTH_QUART)
table(StormData$LENGTH)
quantile(StormData$LENGTH, probs = seq(0,1, 0.25),
na.rm = TRUE, names = TRUE, type = 7)
quantile(StormData$WIDTH, probs = seq(0,1, 0.25),
na.rm = TRUE, names = TRUE, type = 7)
quantile(StormData$WIDTH, probs = seq(0,1, 0.2),
na.rm = TRUE, names = TRUE, type = 7)
quantile(StormData$WIDTH, probs = seq(0,1, 0.1),
na.rm = TRUE, names = TRUE, type = 7)
subStormData <- select(StormData, REFNUM, BGN_YEAR, BGN_DATE, BGN_TIME, TIME_ZONE,
STATE, COUNTYNAME, LATITUDE, LONGITUDE, EVTYPE, F, MAG,
FATALITIES, INJURIES, PROPDMG, CROPDMG, ECONOMIC)
subStormData <- subset(subStormData, BGN_YEAR > "1979")
View(StormData)
View(subStormData)
which(duplicated(subStormData))
?plot
event.economic <- aggregate(ECONOMIC ~ BGN_YEAR + EVTYPE, data = subStormData,
FUN = function(x) sum=sum(x))
event.fatality <- aggregate(FATALITIES ~ BGN_YEAR + EVTYPE, data = subStormData,
FUN = function(x) sum=sum(x))
event.INJURY <- aggregate(INJURIES ~ BGN_YEAR + EVTYPE, data = subStormData,
FUN = function(x) sum=sum(x))
plot(event.facility$EVTYPE, event.facility$BGN_YEAR, type = "l")
plot(event.economic$EVTYPE, event.economic$BGN_YEAR, type = "l")
plot(event.economic$BGN_YEAR, event.economic$ECONOMIC, type = "l")
?qplot
qplot(BGN_YEAR, ECONOMIC, data = event.economic, facets = EVTYPE, geom = C("point", "smooth"))
qplot(BGN_YEAR, ECONOMIC, data = event.economic, facets = EVTYPE, geom = c("point", "smooth"))
View(event.economic)
ggplot(event.economic, aes(x = BGN_YEAR, y = ECONOMIC, group = EVTYPE, color = EVTYPE)) +
geom_line(color = EVTYPE, linetype = "solid", size = 1,) +
labs(title = "Economic Consequences of Weather Event") +
labs(x = "Measurement Year", y = "Economic Cost")
View(event.economic)
ggplot(event.economic, aes(x = BGN_YEAR, y = ECONOMIC)) +
geom_line(color = EVTYPE, linetype = "solid", size = 1,) +
labs(title = "Economic Consequences of Weather Event") +
labs(x = "Measurement Year", y = "Economic Cost")
ggplot(event.economic, aes(x = BGN_YEAR, y = ECONOMIC)) +
geom_line(color = EVTYPE, linetype = "solid", size = 1) +
labs(title = "Economic Consequences of Weather Event") +
labs(x = "Measurement Year", y = "Economic Cost")
ggplot(event.economic, aes(x = BGN_YEAR, y = ECONOMIC)) +
geom_line(color = factor(EVTYPE), linetype = "solid", size = 1) +
labs(title = "Economic Consequences of Weather Event") +
labs(x = "Measurement Year", y = "Economic Cost")
event.economic$ECONOMIC_THSND = round(event.economic$ECONOMIC/1000, digit = 2)
ggplot(event.economic, aes(x = BGN_YEAR, y = ECONOMIC_THSND)) +
geom_line(linetype = "solid", size = 1) +
labs(title = "Economic Consequences of Weather Event") +
labs(x = "Measurement Year", y = "Economic Cost")
View(event.economic)
ggplot(event.economic, aes(x = factor(BGN_YEAR), y = ECONOMIC_THSND, colour = EVTYPE)) +
geom_line() +
geom_point() +
labs(title = "Economic Consequences of Weather Event") +
labs(x = "Measurement Year", y = "Economic Cost")
event.economic <- aggregate(ECONOMIC ~ BGN_YEAR + EVTYPE, data = subStormData,
FUN = function(x) sum=sum(x))
event.economic$ECONOMIC_THSND = as.numeric(round(event.economic$ECONOMIC/1000, digit = 2))
table(event.economic$EVTYPE, event.economic$ECONOMIC_THSND)
table(event.economic$EVTYPE, event.economic$ECONOMIC_THSND, event.economic$BGN_YEAR)
table(event.economic$EVTYPE, event.economic$BGN_YEAR)
