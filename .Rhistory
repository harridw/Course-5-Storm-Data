plot(dates0, x0sub, pch = 20)
abline(h = meadian(x0sub), lwd = 2, na.rm = TRUE)
abline(h = median(x0sub), lwd = 2, na.rm = TRUE)
abline(h = median(x0sub, na.rm = TRUE), lwd = 2)
plot(dates1, x1sub, pch = 20)
abline(h = median(x1sub, na.rm = TRUE), lwd = 2)
rng <- range(x0sub, x1sub, na.rm = TRUE)
rng
mn0 <- with(pm0, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn0)
mn1 <- with(pm1, tapply(Sample.Value, State.Code, mean, na.rm = TRUE))
str(mn1)
summary(mn0)
summary(mn1)
d0 <- data.frame(names(mn0), mn0)
d0 <- data.frame(names(mn0), mean = mn0)
d0 <- data.frame(state = names(mn0), mean = mn0)
d1 <- data.frame(state = names(mn1), mean = mn1)
mrg <- merge(d0, d1, by = "state")
dim(mrg)
head(mrg)
with(mrg, plot)
with(mrg, plot(rep(1, 52), mrg[, 2], xlim = c(.5, 2.5)))
with(mrg, points(rep(2,52), mrg[, 3]))
segments(rep(1999, 52), mrg[, 2], rep(2012, 52), mrg[,3])
segments(rep(1, 52), mrg[, 2], rep(2, 52), mrg[, 3])
mrg[mrg$mean.x < mrg$mean.y,]
bye
setwd{"/Users/harridw/Development/Coursera/Course5/Cours-5-Storm-Data"}
setwd("/Users/harridw/Development/Coursera/Course5/Course-5-Storm-Data")
ipak <- function(pkg){
new.pkg <- pkg[!(pkg %in% installed.packages()[, "Package"])]
if (length(new.pkg))
install.packages(new.pkg, dependencies = TRUE)
sapply(pkg, require, character.only = TRUE)
}
### Package Usage
packages <- c("plyr", "dplyr", "data.table", "dtplyr", "lubridate", "ggplot2", "scales",
"reshape2", "knitr", "R.cache", "stringr", "gtools", "quantreg")
ipak(packages)
StormData <- read.csv("repdata-data-StormData.csv.bz2", header = TRUE, sep = ",",
quote = "\"", dec = ".")
StormData$BGN_DATE <- as.Date(StormData$BGN_DATE, "%m/%d/%Y")
StormData$BGN_YEAR <- format(StormData$BGN_DATE, "%Y")
StormData$hour <- as.numeric(substr(StormData$BGN_TIME, 1, 2))
StormData$minute <- substr(StormData$BGN_TIME, 3, 4)
StormData$ampm <- ifelse(StormData$hour > 12, "PM", "AM")
StormData$hour <- ifelse(StormData$hour > 12, StormData$hour - 12,
ifelse(StormData$hour < 1, 12, StormData$hour))
StormData$hour <- substr(paste("00", StormData$hour, sep = ""),
min(length(StormData$hour)+1,3),min(length(StormData$hour)+2, 4))
StormData$BGN_TIME <- paste(StormData$hour, ":", StormData$minute, " ",
StormData$ampm, sep = "")
subStormData <- select(StormData, REFNUM, BGN_YEAR, BGN_DATE, BGN_TIME, TIME_ZONE,
STATE, COUNTYNAME, LATITUDE, LONGITUDE, EVTYPE, F, MAG,
FATALITIES, INJURIES, PROPDMG, PROPDMGEXP, CROPDMG, CROPDMGEXP)
subStormData <- subset(subStormData, BGN_YEAR > "1989")
subStormData <- subStormData[order(subStormData$STATE, subStormData$COUNTYNAME,
subStormData$EVTYPE, subStormData$BGN_DATE),]
subStormData$PROPDMG <- subStormData$PROPDMG *
ifelse(subStormData$PROPDMGEXP %in% c("h","H"), 100,
ifelse(subStormData$PROPDMGEXP %in% c("k", "K"), 1000,
ifelse(subStormData$PROPDMGEXP %in% c("m", "M"), 1000000,
ifelse(subStormData$PROPDMGEXP %in% c("b", "B"), 1000000000, 1))))
subStormData$CROPDMG <- subStormData$CROPDMG *
ifelse(subStormData$CROPDMGEXP %in% c("h","H"), 100,
ifelse(subStormData$CROPDMGEXP %in% c("k", "K"), 1000,
ifelse(subStormData$CROPDMGEXP %in% c("m", "M"), 1000000,
ifelse(subStormData$CROPDMGEXP %in% c("b", "B"), 1000000000, 1))))
subStormData$TTLDMG <- subStormData$PROPDMG + subStormData$CROPDMG
subStormData <- select(subStormData, -c(PROPDMGEXP, CROPDMGEXP))
View(subStormData)
subStormData$EVENT_TYPE <- ifelse(grepl("TORNADO", subStormData$EVTYPE,
ignore.case = TRUE), "Tornado",
ifelse(grepl("TYPHOON", subStormData$EVTYPE,
ignore.case = TRUE), "Hurricane(Typhoon)",
ifelse(grepl("HURRICAN", subStormData$EVTYPE,
ignore.case = TRUE), "Hurricane",
ifelse(grepl("TSUNAMI", subStormData$EVTYPE,
ignore.case = TRUE), "Tsunami",
ifelse(grepl("FUNNEL", subStormData$EVTYPE,
ignore.case = TRUE), "Funnel Cloud",
ifelse(grepl("AVALANCHE", subStormData$EVTYPE,
ignore.case = TRUE), "Avalanche",
ifelse(grepl("BLIZZARD", subStormData$EVTYPE,
ignore.case = TRUE), "Blizzard",
ifelse(grepl("MARINE HAIL", subStormData$EVTYPE,
ignore.case = TRUE), "Marine Hail",
ifelse(grepl("MARINE HIGH WIND", subStormData$EVTYPE,
ignore.case = TRUE), "Marine High Wind",
ifelse(grepl("MARINE STRONG WIND", subStormData$EVTYPE,
ignore.case = TRUE), "Marine Strong Wind",
ifelse(grepl("MARUNE THUNDERSTORM", subStormData$EVTYPE,
ignore.case = TRUE), "Marine Thunderstorm Wind",
ifelse(grepl("THUNDERSTORM", subStormData$EVTYPE,
ignore.case = TRUE), "Thunderstorm Wind",
ifelse(grepl("TSTM", subStormData$EVTYPE,
ignore.case = TRUE), "Thunderstorm Wind",
ifelse(grepl("HAIL", subStormData$EVTYPE,
ignore.case = TRUE), "HAIL",
ifelse(grepl("EXTREME COLD", subStormData$EVTYPE,
ignore.case = TRUE), "Extreme Cold/Wind Chill",
ifelse(grepl("EXTREME WIND CHILL", subStormData$EVTYPE,
ignore.case = TRUE), "Extreme Cold/Wind Chill",
ifelse(grepl("COLD", subStormData$EVTYPE,
ignore.case = TRUE), "Cold/Wind Chill",
ifelse(grepl("WIND CHILL", subStormData$EVTYPE,
ignore.case = TRUE), "Cold/Wind Chill",
ifelse(grepl("FOG", subStormData$EVTYPE,
ignore.case = TRUE),
ifelse(grepl("FREEZ", subStormData$EVTYPE,
ignore.case = TRUE), "Freezing Fog",
"Dense Fog"),
ifelse(grepl("FLOOD", subStormData$EVTYPE,
ignore.case = TRUE),
ifelse(grepl("LAKE", subStormData$EVTYPE,
ignore.case = TRUE), "Lakeshore Flood",
ifelse(grepl("FLASH", subStormData$EVTYPE,
ignore.case = TRUE), "Flash Flood",
ifelse(grepl("COASTAL", subStormData$EVTYPE,
ignore.case = TRUE), "Coastal Flood",
ifelse(grepl("SHORE", subStormData$EVTYPE,
ignore.case = TRUE), "Coastal Flood",
"Flood")))),
ifelse(grepl("FIRE", subStormData$EVTYPE,
ignore.case = TRUE), "Wildfire",
ifelse(grepl("DROUGHT", subStormData$EVTYPE,
ignore.case = TRUE), "Drought",
ifelse(grepl("DRY", subStormData$EVTYPE,
ignore.case = TRUE), "Drought",
ifelse(grepl("HEAT", subStormData$EVTYPE,
ignore.case = TRUE),
ifelse(grepl("EXCESSIVE", subStormData$EVTYPE,
ignore.case = TRUE), "Excessive Heat",
"Heat"),
ifelse(grepl("LIGHTNING", subStormData$EVTYPE,
ignore.case = TRUE), "Lightning",
ifelse(grepl("SNOW", subStormData$EVTYPE,
ignore.case = TRUE),
ifelse(grepl("LAKE", subStormData$EVTYPE,
ignore.case = TRUE), "Lake-effect Snow",
ifelse(grepl("HEAVY", subStormData$EVTYPE,
ignore.case = TRUE), "Heavy Snow",
ifelse(grepl("SLEET", subStormData$EVTYPE,
ignore.case = TRUE), "Winter Weather",
ifelse(grepl("ICE", subStormData$EVTYPE,
ignore.case = TRUE), "Winter Weather",
ifelse(grepl("RAIN", subStormData$EVTYPE,
ignore.case = TRUE), "Winter Weather",
"Winter Storm"))))),
ifelse(grepl("HOT", subStormData$EVTYPE,
ignore.case = TRUE), "HEAT",
ifelse(grepl("DUST", subStormData$EVTYPE,
ignore.case = TRUE),
ifelse(grepl("DEVIL", subStormData$EVTYPE,
ignore.case = TRUE), "Dust Devil",
"Dust Storm"),
ifelse(grepl("FROST", subStormData$EVTYPE,
ignore.case = TRUE), "Frost / Freeze",
ifelse(grepl("FREEZE", subStormData$EVTYPE,
ignore.case = TRUE), "Frost / Freeze",
ifelse(grepl("ICE ROADS", subStormData$EVTYPE,
ignore.case = TRUE), "Frost / Freeze",
ifelse(grepl("SLEET", subStormData$EVTYPE,
ignore.case = TRUE), "Sleet",
ifelse(grepl("VOLCANIC", subStormData$EVTYPE,
ignore.case = TRUE), "Volcanic Ash",
ifelse(grepl("RAIN", subStormData$EVTYPE,
ignore.case = TRUE), "Heavy Rain",
ifelse(grepl("WET", subStormData$EVTYPE,
ignore.case = TRUE), "Heavy Rain",
ifelse(grepl("MICROBURST", subStormData$EVTYPE,
ignore.case = TRUE), "Strong Wind",
ifelse(grepl("Wind", subStormData$EVTYPE,
ignore.case = TRUE),
ifelse(grepl("HIGH", subStormData$EVTYPE,
ignore.case = TRUE), "High Wind",
ifelse(grepl("STRONG", subStormData$EVTYPE,
ignore.case = TRUE), "Strong Wind",
"High Wind")),
ifelse(grepl("PRECIPITATION", subStormData$EVTYPE,
ignore.case = TRUE), "Heavy Rain",
ifelse(grepl("FLD", subStormData$EVTYPE,
ignore.case = TRUE), "Flood",
ifelse(grepl("ASTRONOMICAL LOW TIDE", subStormData$EVTYPE,
ignore.case = TRUE), "Astronomical Low Tide",
ifelse(grepl("ASTRONOMICAL HIGH TIDE", subStormData$EVTYPE,
ignore.case = TRUE), "Coastal Flood",
ifelse(grepl("SURGE", subStormData$EVTYPE,
ignore.case = TRUE), "Storm Surge/Tide",
ifelse(grepl("TIDE", subStormData$EVTYPE,
ignore.case = TRUE), "Storm Surge/Tide",
ifelse(grepl("EROSION", subStormData$EVTYPE,
ignore.case = TRUE), "Storm Surge/Tide",
ifelse(grepl("FREEZING DRIZZLE", subStormData$EVTYPE,
ignore.case = TRUE), "Sleet",
ifelse(grepl("HEAVY SHOWER", subStormData$EVTYPE,
ignore.case = TRUE), "Heavy Rain",
ifelse(grepl("LOW TEMP", subStormData$EVTYPE,
ignore.case = TRUE), "Cold/Wind Chill",
ifelse(grepl("WINTER MIX", subStormData$EVTYPE,
ignore.case = TRUE), "Winter Weather",
ifelse(grepl("COASTALSTORM", subStormData$EVTYPE,
ignore.case = TRUE), "Tropical Storm",
"Other Event")))))))))))))))))))))))))))))))))))))))))))))))))
subStormData <- select(subStormData, REFNUM, EVENT_TYPE, EVTYPE, F, MAG, BGN_YEAR,
BGN_DATE, BGN_TIME, TIME_ZONE, STATE, COUNTYNAME, LATITUDE,
LONGITUDE, FATALITIES, INJURIES, PROPDMG, CROPDMG, TTLDMG)
subStormData <- subStormData[order(subStormData$EVENT_TYPE, subStormData$EVTYPE,
subStormData$STATE, subStormData$COUNTYNAME,
subStormData$BGN_YEAR, subStormData$BGN_DATE,
subStormData$BGN_TIME)]
subStormData <- subStormData[order(subStormData$EVENT_TYPE, subStormData$EVTYPE,
subStormData$STATE, subStormData$COUNTYNAME,
subStormData$BGN_YEAR, subStormData$BGN_DATE,
subStormData$BGN_TIME),]
View(subStormData)
subStormData <- select(subStormData, REFNUM, EVENT_TYPE, EVTYPE, F, MAG, STATE,
COUNTYNAME, CBGN_YEAR, BGN_DATE, BGN_TIME, TIME_ZONE, LATITUDE,
LONGITUDE, FATALITIES, INJURIES, PROPDMG, CROPDMG, TTLDMG)
subStormData <- select(subStormData, REFNUM, EVENT_TYPE, EVTYPE, F, MAG, STATE,
COUNTYNAME, BGN_YEAR, BGN_DATE, BGN_TIME, TIME_ZONE, LATITUDE,
LONGITUDE, FATALITIES, INJURIES, PROPDMG, CROPDMG, TTLDMG)
View(subStormData)
economic.sum <- aggregate(TTLDMG ~ EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
economic.sum <- economic.sum[order(economic.sum$TTLDMG, decreasing = TRUE),]
economic.sum$TTLDMG_M <- round(economic.sum$TTLDMG / 1000000, digits = 2)
economic.sum$DOLLARS <- dollar(economic.sum$TTLDMG_M)
economic.rpt <- select(economic.sum, EVENT_TYPE, DOLLARS)
economic.rpt
fatality.sum <- aggregate(FATALITIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
fatality.sum <- fatality.sum[order(fatality.sum$FATALITIES, decreasing = TRUE),]
injury.sum <- aggregate(INJURIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
injury.sum <- injury.sum[order(injury.sum$INJURIES, decreasing = TRUE),]
pophlth.sum <- merge(fatality.sum, injury.sum, by.x = "EVENT_TYPE")
pophlth.sum <- pophlth.sum[order(pophlth.sum$FATALITIES, pophlth.sum$INJURIES,
decreasing = TRUE),]
pophlth.sum
economic20.sum <- subset(economic.sum, EVENT_TYPE != "Other Event")
economic20.sum <- economic20.sum[1:20,]
View(economic20.sum)
top20DMG <- c(economic20.sum$EVENT_TYPE)
economic10.sum <- subset(economic.sum, EVENT_TYPE != "Other Event")
economic10.sum <- economic20.sum[1:10,]
top10DMG <- c(economic20.sum$EVENT_TYPE)
event.dmg <- aggregate(TTLDMG ~ BGN_YEAR + EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
event.dmg10 <- subset(event.dmg, EVENT_TYPE %in% c(top10DMG))
View(event.dmg10)
event.dmg10$DMG_AMT <- round(event.dmg10$TTLDMG / 1000000, digits = 3)
qplot(BGN_YEAR, DMG_AMT, data = event.dmg10, color = EVENT_TYPE,
geom = c("point", "smooth"),
main = "Total Economic Consequence by Event (1990 - 2011)",
xlab = "Measurement Year", ylab = "Total Cost (in Millions)")
qplot(BGN_YEAR, DMG_AMT, data = event.dmg10, color = EVENT_TYPE,
geom = c("point", "line"),
main = "Total Economic Consequence by Event (1990 - 2011)",
xlab = "Measurement Year", ylab = "Total Cost (in Millions)")
qplot(BGN_YEAR, DMG_AMT, data = event.dmg10, color = EVENT_TYPE,
geom = "line",
main = "Total Economic Consequence by Event (1990 - 2011)",
xlab = "Measurement Year", ylab = "Total Cost (in Millions)")
qplot(BGN_YEAR, DMG_AMT, data = event.dmg10, color = EVENT_TYPE)
qplot(BGN_YEAR, DMG_AMT, data = event.dmg10, colour = EVENT_TYPE,
geom = c("point", "path"),
main = "Total Economic Consequence by Event (1990 - 2011)",
xlab = "Measurement Year", ylab = "Total Cost (in Millions)")
ggplot(event.dmg10, aes(x = BGN_YEAR, y = DMG_AMT, colour = EVTYPE)) +
geom_line() +
geom_point() +
labs(title = "Total Damage for Top 10 Events") +
labs(x = "Measurement Year", y = "Total Damage(in millions)")
ggplot(event.dmg10, aes(x = BGN_YEAR, y = DMG_AMT, colour = EVENT_TYPE)) +
geom_line() +
geom_point() +
labs(title = "Total Damage for Top 10 Events") +
labs(x = "Measurement Year", y = "Total Damage(in millions)")
ggplot(event.dmg10, aes(x = BGN_YEAR, y = DMG_AMT, group = EVENT_TYPE, colour = EVENT_TYPE)) +
geom_line() +
geom_point() +
labs(title = "Total Damage for Top 10 Events") +
labs(x = "Measurement Year", y = "Total Damage(in millions)")
economic10.sum <- subset(economic.sum, EVENT_TYPE != "Other Event")
economic10.sum <- economic20.sum[1:10,]
top10DMG <- c(economic20.sum$EVENT_TYPE)
event.dmg <- aggregate(TTLDMG ~ BGN_YEAR + EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
event.dmg10 <- subset(event.dmg, EVENT_TYPE %in% c(top10DMG))
event.dmg10$DMG_AMT <- round(event.dmg10$TTLDMG / 1000000, digits = 3)
View(event.dmg)
View(event.dmg10)
ggplot(event.dmg10, aes(x=BGN_YEAR, y=DMG_AMT, group=EVENT_TYPE, colour = EVENT_TYPE)) +
+     geom_line() +
+     geom_point() +
+     labs(title = "Total Damage for Top 10 Events") +
+     labs(x = "Measurement Year", y = "Total Damage(in millions)")
ggplot(event.dmg10, aes(x=BGN_YEAR, y=DMG_AMT, group=EVENT_TYPE, colour = EVENT_TYPE)) +
geom_line() +
geom_point() +
labs(title = "Total Damage for Top 10 Events") +
labs(x = "Measurement Year", y = "Total Damage(in millions)")
economic10.sum <- subset(economic.sum, EVENT_TYPE != "Other Event")
economic10.sum <- economic20.sum[1:10,]
top10DMG <- c(economic10.sum$EVENT_TYPE)
event.dmg <- aggregate(TTLDMG ~ BGN_YEAR + EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
event.dmg10 <- subset(event.dmg, EVENT_TYPE %in% c(top10DMG))
event.dmg10$DMG_AMT <- round(event.dmg10$TTLDMG / 1000000, digits = 3)
ggplot(event.dmg10, aes(x=BGN_YEAR, y=DMG_AMT, group=EVENT_TYPE, colour = EVENT_TYPE)) +
geom_line() +
geom_point() +
labs(title = "Total Damage for Top 10 Events") +
labs(x = "Measurement Year", y = "Total Damage(in millions)")
fatality10.sum <- subset(fatality.sum, EVENT_TYPE != "Other Event")
fatality10.sum <- fatality10.sum[1:10,]
top10Fatality <- c(fatality10.sum$EVENT_TYPE)
event.fatality <- aggregate(FATALITIES ~ BGN_YEAR + EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
event.fatality10 <- subset(event.fatality, EVENT_TYPE %in% c(top10Fatality))
ggplot(event.fatality10, aes(x=BGN_YEAR, y=FATALITIES, group=EVENT_TYPE,
colour = EVENT_TYPE)) +
geom_line() +
geom_point() +
labs(title = "Total Fatalities for Top 10 Events") +
labs(x = "Measurement Year", y = "Total Fatalities")
economic.mean <- aggregate(TTLDMG ~ EVENT_TYPE, data = subStormData,
FUN = function(x) mean=mean(x))
economic.mean <- economic.mean[order(economic.mean$TTLDMG, decreasing = TRUE),]
economic.mean$AVGLDMG_M <- round(economic.mean$TTLDMG / 1000000, digits = 2)
economic.mean$AVG_DOLLARS <- dollar(economic.sum$AVGDMG_M)
economic.mean$AVG_DOLLARS <- dollar(economic.mean$AVGDMG_M)
economic.mean <- aggregate(TTLDMG ~ EVENT_TYPE, data = subStormData,
FUN = function(x) mean=mean(x))
economic.mean <- economic.mean[order(economic.mean$TTLDMG, decreasing = TRUE),]
economic.mean$AVGDMG_M <- round(economic.mean$TTLDMG / 1000000, digits = 2)
economic.mean$AVG_DOLLARS <- dollar(economic.mean$AVGDMG_M)
View(economic.mean)
merge(economic.sum, economic.mean, by.x = EVENT_TYPE)
merge(economic.sum, economic.mean, by.x = "EVENT_TYPE")
merge(economic.sum, economic.mean, by.x == "EVENT_TYPE")
View(economic.sum)
merge(economic.sum, economic.mean, by == "EVENT_TYPE")
merge(economic.sum, economic.mean, by = "EVENT_TYPE")
event.max <- aggregate(TTLDMG ~ BGN_YEAR + EVENT_TYPE, data = subStormData,
FUN = function(x) max=max(x))
View(event.max)
View(event.dmg)
event.max <- aggregate(TTLDMG ~ EVENT_TYPE, data = event.dmg,
FUN = function(x) max=max(x))
View(event.max)
event.adj <- merge(economic.mean, event.max, by = "EVENT_TYPE")
View(event.adj)
event.adj$DIFF <- event.adj$TTLDMG.x - event.adj$TTLDMG.y
View(event.adj)
event.adj <- rename(event.adj, c("TTLDMG.x" = "AVG_COST", "TTLDMG.y" = "MAX_COST"))
event.adj$DIFF <- event.adj$AVG_COST - event.adj$MAX_COST
View(event.adj)
event.adj <- merge(economic.mean, event.max, by = "EVENT_TYPE")
event.adj <- select(event.adj, EVENT_TYPE, TTLDMG.x, TTLDMG.y)
event.adj <- rename(event.adj, c("EVENT_TYPE" = "EVENT_TYPE", "TTLDMG.x" = "AVG_COST",
"TTLDMG.y" = "MAX_COST"))
View(event.adj)
event.adj <- merge(economic.mean, event.max, by = "EVENT_TYPE")
event.adj <- select(event.adj, EVENT_TYPE, TTLDMG.x, TTLDMG.y)
event.adj$DIFF <- event.adj$TTLDMG.x - event.adj$TTLDMG.y
economic.report <- merge(economic.sum, economic.mean, by = "EVENT_TYPE")
View(economic.report)
economic.report <- setnames(economic.report,
old = c("EVENT_TYPE", "TTLDMG.x", "TTLDMG_M", "DOLLARS",
"TTLDMG.y", "AVGDMG_M", "AVG_DOLLARS"),
new = c("EVENT_TYPE", "TTL_DMG", "TTLDMG_M", "TTL_DOLLARS",
"AVG_DMG", "AVGDMG_M", "AVG_DOLLARS"))
View(economic.report)
economic.mean <- aggregate(TTLDMG ~ EVENT_TYPE, data = subStormData,
FUN = function(x) mean=mean(x))
economic.mean <- economic.mean[order(economic.mean$TTLDMG, decreasing = TRUE),]
economic.mean$AVGDMG_K <- round(economic.mean$TTLDMG / 1000, digits = 2)
economic.mean$AVG_DOLLARS <- dollar(economic.mean$AVGDMG_K)
economic.report <- merge(economic.sum, economic.mean, by = "EVENT_TYPE")
economic.report <- setnames(economic.report,
old = c("EVENT_TYPE", "TTLDMG.x", "TTLDMG_M", "DOLLARS",
"TTLDMG.y", "AVGDMG_K", "AVG_DOLLARS"),
new = c("EVENT_TYPE", "TTL_DMG", "TTLDMG_M", "TTL_DOLLARS",
"AVG_DMG", "AVGDMG_K", "AVG_DOLLARS"))
economic.report <- select(economic.report, EVENT_TYPE, TTL_DMG, TTLDMG_M, TTL_DOLLARS,
AVG_DMG, AVGDMG_K, AVG_DOLLARS)
economic.report <- economic.report[order(economic.report$TTL_DMG,
economic.report$AVG_DMG),]
View(economic.report)
economic.report <- economic.report[order(economic.report$TTL_DMG,
economic.report$AVG_DMG, decreasing = TRUE),]
View(economic.report)
economic.report <- merge(economic.sum, economic.mean, by = "EVENT_TYPE")
economic.report <- setnames(economic.report,
old = c("EVENT_TYPE", "TTLDMG.x", "TTLDMG_M", "DOLLARS",
"TTLDMG.y", "AVGDMG_K", "AVG_DOLLARS"),
new = c("EVENT_TYPE", "TTL_DMG", "TTLDMG_M", "TTL(millions)",
"AVG_DMG", "AVGDMG_K", "AVG(000)"))
economic.report <- select(economic.report, EVENT_TYPE, TTL_DMG, TTLDMG_M, TTL(millions),
AVG_DMG, AVGDMG_K, AVG(000))
economic.report <- economic.report[order(economic.report$TTL_DMG,
economic.report$AVG_DMG, decreasing = TRUE),]
economic.report.smry <- select(economic.report, EVENT_TYPE, TTL(millions), AVG(000))
economic.report <- merge(economic.sum, economic.mean, by = "EVENT_TYPE")
economic.report <- setnames(economic.report,
old = c("EVENT_TYPE", "TTLDMG.x", "TTLDMG_M", "DOLLARS",
"TTLDMG.y", "AVGDMG_K", "AVG_DOLLARS"),
new = c("EVENT_TYPE", "TTL_DMG", "TTLDMG_M", "TTL_Millions",
"AVG_DMG", "AVGDMG_K", "AVG_THSND"))
economic.report <- select(economic.report, EVENT_TYPE, TTL_DMG, TTLDMG_M, TTL_Millions,
AVG_DMG, AVGDMG_K, AVG_THSND)
conomic.report <- economic.report[order(economic.report$TTL_DMG,
economic.report$AVG_DMG, decreasing = TRUE),]
economic.report.smry <- select(economic.report, EVENT_TYPE, TTL(millions), AVG(000))
economic.report.smry <- select(economic.report, EVENT_TYPE, TTL_Millions,
AVG_THSND)
View(economic.report.smry)
economic.report.smry <- economic.report.smry[order(economic.report.smry$TTL_Millions,
economic.report.smry$AVG_THSND),]
View(economic.report.smry)
economic.report.smry <- economic.report.smry[order(economic.report.smry$TTL_Millions,
economic.report.smry$AVG_THSND, decreasing = TRUE),]
View(economic.report.smry)
View(economic.report)
economic.report <- economic.report[order(economic.report$TTL_DMG, decreasing = TRUE,
economic.report$AVG_DMG, decreasing = TRUE),]
economic.report <- economic.report[order(economic.report$TTL_DMG,
economic.report$AVG_DMG, decreasing = TRUE),]
View(conomic.report)
economic.report.smry <- economic.report.smry[order(economic.report.smry$TTL_Millions,
economic.report.smry$AVG_THSND, decreasing = TRUE),]
View(economic.report)
View(economic.report.smry)
economic.report.smry <- economic.report.smry[order(economic.report.smry$TTL_Millions,
decreasing = TRUE),]
View(economic.report.smry)
economic.report <- merge(economic.sum, economic.mean, by = "EVENT_TYPE")
economic.report <- setnames(economic.report,
old = c("EVENT_TYPE", "TTLDMG.x", "TTLDMG_M", "DOLLARS",
"TTLDMG.y", "AVGDMG_K", "AVG_DOLLARS"),
new = c("EVENT_TYPE", "TTL_DMG", "TTLDMG_M", "TTL_Millions",
"AVG_DMG", "AVGDMG_K", "AVG_THSND"))
economic.report <- select(economic.report, EVENT_TYPE, TTL_DMG, TTLDMG_M, TTL_Millions,
AVG_DMG, AVGDMG_K, AVG_THSND)
economic.report <- economic.report[order(economic.report$TTL_DMG,
economic.report$AVG_DMG, decreasing = TRUE),]
economic.report.smry <- select(economic.report, EVENT_TYPE, TTLDMG_M, TTL_Millions,
AVGDMG_K, AVG_THSND)
economic.report.smry <- economic.report.smry[order(economic.report.smry$TTLDMG_M,
economic.report.smry$AVGDMG_K, decreasing = TRUE),]
View(economic.report.smry)
select(economic.report.smry, EVENT_TYPE, TTL_Millions, AVG_THSND)
economic.report.smry <- select(economic.report.smry, EVENT_TYPE, TTL_Millions, AVG_THSND)
View(economic.report.smry)
fatality.sum <- aggregate(FATALITIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
fatality.sum <- fatality.sum[order(fatality.sum$FATALITIES, decreasing = TRUE),]
fatality.mean <- aggregate(FATALITIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) mean=mean(x))
fatality.mean <- fatality.sum[order(fatality.sum$FATALITIES, decreasing = TRUE),]
event.fatality <- merge(fatality.sum, fatality.mean, by = "EVENT_TYPE")
event.fatality <- setnames(event.fatality, old = c("EVENT_TYPE", "FATALITIES.x",
"FATALITIES.y")
new = c("EVENT_TYPE", "TTL_FATALITY",
"AVG_FATALITY"))
event.fatality <- event.fatality[order(event.fatality$TTL_FATALITY,
event.fatality$AVG_FATALITY, decreasing = TRUE),]
event.fatality <- setnames(event.fatality, old = c("EVENT_TYPE", "FATALITIES.x",
"FATALITIES.y"),
new = c("EVENT_TYPE", "TTL_FATALITY",
"AVG_FATALITY"))
event.fatality <- event.fatality[order(event.fatality$TTL_FATALITY,
event.fatality$AVG_FATALITY, decreasing = TRUE),]
View(event.fatality)
fatality.sum <- aggregate(FATALITIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
fatality.sum <- fatality.sum[order(fatality.sum$FATALITIES, decreasing = TRUE),]
fatality.mean <- aggregate(FATALITIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) mean=mean(x))
fatality.mean <- fatality.mean[order(fatality.mean$FATALITIES, decreasing = TRUE),]
event.fatality <- merge(fatality.sum, fatality.mean, by = "EVENT_TYPE")
event.fatality <- setnames(event.fatality, old = c("EVENT_TYPE", "FATALITIES.x",
"FATALITIES.y"),
new = c("EVENT_TYPE", "TTL_FATALITY",
"AVG_FATALITY"))
event.fatality <- event.fatality[order(event.fatality$TTL_FATALITY,
event.fatality$AVG_FATALITY, decreasing = TRUE),]
View(event.fatality)
fatality.sum <- aggregate(FATALITIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
fatality.sum <- fatality.sum[order(fatality.sum$FATALITIES, decreasing = TRUE),]
fatality.mean <- aggregate(FATALITIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) mean=mean(x))
fatality.mean <- fatality.mean[order(fatality.mean$FATALITIES, decreasing = TRUE),]
event.fatality <- merge(fatality.sum, fatality.mean, by = "EVENT_TYPE")
event.fatality <- setnames(event.fatality, old = c("EVENT_TYPE", "FATALITIES.x",
"FATALITIES.y"),
new = c("EVENT_TYPE", "TTL_FATALITY",
"AVG_FATALITY"))
event.fatality <- event.fatality[order(event.fatality$TTL_FATALITY,
event.fatality$AVG_FATALITY, decreasing = TRUE),]
injury.sum <- aggregate(INJURIES ~ EVENT_TYPE, data = subStormData,
FUN = function(x) sum=sum(x))
injury.sum <- injury.sum[order(injury.sum$INJURIES, decreasing = TRUE),]
pophlth.sum <- merge(event.fatality, injury.sum, by = "EVENT_TYPE")
pophlth.sum <- pophlth.sum[order(pophlth.sum$TTL_FATALITY, pophlth.sum$INJURIES,
decreasing = TRUE),]
View(pophlth.sum)
pophlth.sum
